---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Percy.
--- DateTime: 2024/12/25
---
package.cpath = package.cpath .. ';C:/Users/Percy/AppData/Roaming/JetBrains/IdeaIC2024.3/plugins/EmmyLua/debugger/emmy/windows/x64/?.dll'
local dbg = require('emmy_core')
dbg.tcpConnect('localhost', 9966)

local ant_path_matcher = {}

--- inner function
--- external use can not care
function ant_path_matcher:new(o)
    local o = o or {}
    setmetatable(o, ant_path_matcher)
    self.__index = ant_path_matcher
    return o
end

--- instance
--- use: ant_path_matcher:instance()
function ant_path_matcher:instance()
    if self.single == nil then
        self.single = self:new()
    end
    return self.single
end

function ant_path_matcher:match(pattern, url)
    if type(pattern) ~= "string" then
        print("pattern must be string!")
        return false
    end
    if #pattern < 1 then
        print("pattern length not empty!")
        return false
    end
    if type(url) ~= "string" then
        print("url must be string")
        return false
    end
    if #url < 1 then
        print("url length not empty!")
        return false
    end

    local url_parts = self:split(url, "/")
    local pattern_parts = self:split(pattern, "/")
    local pattern_parts_size = self:size(pattern_parts)
    local url_parts_size = self:size(url_parts)

    local g_j = 1
    for i = 1, pattern_parts_size do
        for j = g_j, url_parts_size do
            local current_pattern_part = pattern_parts[i]
            local current_url_part = url_parts[j]
            if current_pattern_part == "**" then
                if (i == pattern_parts_size) then
                    return true
                else
                    local next_max_i = i + 1
                    if next_max_i > pattern_parts_size then
                        next_max_i = pattern_parts_size
                    end
                    local next_max_j = j + 1
                    if next_max_j > url_parts_size then
                        next_max_j = url_parts_size
                    end
                    local next_pattern_part = pattern_parts[next_max_i]
                    local next_url_part = url_parts[next_max_j]

                    if(next_max_i == pattern_parts_size) then
                        if(next_pattern_part == "**" or next_pattern_part == "*") then
                            return true
                        else
                            g_j = g_j + 1
                            break
                        end
                    else
                        local prefix_next_pattern_part = string.sub(next_pattern_part, 1, 1)
                        local prefix_next_url_part = string.sub(next_url_part, 1, 1)

                        if (prefix_next_pattern_part == prefix_next_url_part) then
                            g_j = g_j + 1
                            break
                        else
                            g_j = g_j + 1
                        end
                    end
                end
            elseif current_pattern_part == "*" then
                g_j = g_j + 1
                break
            elseif current_pattern_part == "?" then
                if(#current_url_part == 1) then
                    g_j = g_j + 1
                    break
                else
                    return false
                end
            elseif self:starts(current_pattern_part, "{") and self:ends(current_pattern_part, "}") then
                g_j = g_j + 1
                break
            else
                local g_jj = 1
                local current_pattern_part_size = #current_pattern_part
                local current_url_part_size = #current_url_part
                for ii = 1, current_pattern_part_size do
                    for jj = g_jj, current_url_part_size do
                        local sub_ii = string.sub(current_pattern_part, ii, ii)
                        if (sub_ii == "*") then
                            if (ii == current_pattern_part_size) then
                                g_jj = g_jj + 1
                                break
                            end
                            local next_ii_max = ii + 1
                            if next_ii_max > current_pattern_part_size then
                                next_ii_max = current_pattern_part_size
                            end
                            local next_jj_max = jj + 1
                            if next_jj_max > current_url_part_size then
                                next_jj_max = current_url_part_size
                            end

                            local next_pattern_part = string.sub(current_pattern_part, next_ii_max, next_ii_max)
                            local next_url_part = string.sub(current_url_part, next_jj_max, next_jj_max)

                            if next_pattern_part == next_url_part then
                                g_jj = g_jj + 1
                                break
                            else
                                g_jj = g_jj + 1
                            end
                        elseif (sub_ii == "?") then
                            g_jj = g_jj + 1
                            if(g_jj > current_url_part_size) then
                                return false
                            else
                                break
                            end
                        else
                            local sub_jj = string.sub(current_url_part, jj, jj)
                            if (sub_ii == sub_jj) then
                                g_jj = g_jj + 1
                                break
                            else
                                return false
                            end
                        end
                    end

                    if (g_jj == current_url_part_size) and ii < current_pattern_part_size then
                        return false
                    end
                end
                g_j = g_j + 1
                break
            end
        end
    end
    return true
end

function ant_path_matcher:contains(input, target)
    local pos = string.find(input, target)
    if pos then
        return true
    end
    return false
end

---ends of suffix
---@param input
---@param suffix
---@return boolean of result
function ant_path_matcher:ends(input, suffix)
    return suffix == "" or string.sub(input,-string.len(suffix)) == suffix
end

---starts of prefix
---@param input
---@param prefix
---@return boolean of result
function ant_path_matcher:starts(input, prefix)
    return string.sub(input, 1, string.len(prefix)) == prefix
end

--- split of input
---@param input
---@param delimiter
---@return table of result
function ant_path_matcher:split(input, delimiter)
    local start = 1
    local arr = {}
    while true do
        local pos = string.find(input, delimiter, start, true)
        if not pos then
            break
        end
        local sub = string.sub(input, start, pos - 1)
        if (sub ~= "") then
            table.insert(arr, sub)
        end

        start = pos + string.len(delimiter)
    end
    local sub = string.sub(input, start)
    if (sub ~= "") then
        table.insert(arr, sub)
    end

    return arr
end

function ant_path_matcher:size(t)
    local len=0
    for k, v in ipairs(t) do
        len=len + 1
    end
    return len;
end


--local pattern = "/jd/a*c"
--local url = "/jd/a"
--local compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url" .. url ..". compare: ".. tostring(compare))


--pattern = "/jd/*/abc"
--url = "/jd/d/abc"
--compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url" .. url ..". compare: ".. tostring(compare))


--pattern = "/jd/**/abc"
--url = "/jd/d/abc"
--compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url" .. url ..". compare: ".. tostring(compare))
--
--pattern = "/jd/**/abc"
--url = "/jd/d/abc/8686.html"
--compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url" .. url ..". compare: ".. tostring(compare))


--pattern = "/**/abc"
--url = "/jd/d/1213"
--compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url" .. url ..". compare: ".. tostring(compare))

--pattern = "/**/abc.html"
--url = "/a/abc"
--compare = ant_path_matcher:match(pattern, url)
--print("pattern: " .. pattern ..", url: " .. url ..". compare: ".. tostring(compare))


return ant_path_matcher


